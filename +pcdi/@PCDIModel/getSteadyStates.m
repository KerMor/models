function ss = getSteadyStates(this, n, doplot)

if nargin < 3
    doplot = false;
end

% Procaspase-8 to Caspase-8 reaction rate       
K1 = this.K1*this.tau;
% Procaspase-3 to Caspase-3 reaction rate
K2 = this.K2*this.tau; 
% IAP-Caspase 3 (de)reaction rate
K3 = this.K3*this.tau;        
% IAP-Caspase 3 one-way (de)reaction rate
K4 = this.K4*this.tau;         
% Caspase-8 degradation rate
K5 = this.K5*this.tau;         
% Caspase-3 degradation rate
K6 = this.K6*this.tau;         
% YAI degradation rate
K7 = this.K7*this.tau;        
% IAP degradation rate
K8 = this.K8*this.tau;        
% Pro-Caspase-8 degradation rate
K9 = this.K9*this.tau;        
% Caspase-3 degradation rate
K10 = this.K10*this.tau;        
% BAR - Procaspase-8 (de)reaction rate
K11 = this.K11*this.tau;         
% BAR degradation rate
K12 = this.K12*this.tau;        
% XAP degradation rate
K13 = this.K13*this.tau;        
% YAI to IAP production rate
Km3 = this.Km3*this.tau;        
% IAP production rate
Km8 = this.Km8*this.tau;         
% Procaspase-8 production rate
Km9 = this.Km9*this.tau;         
% Procaspase-3 production rate
Km10 = this.Km10*this.tau;        
% XAB degradation rate
Km11 = this.Km11*this.tau;
% BAR production rate
Km12 = this.Km12*this.tau;

% Koeffizient vor x
a1 = (-Km8 * K2 * K10 * Km9 * K12 * Km11 * K9 * K3 * K7 * K11 * K13 * Km12 - Km8 * K2 * K10 * Km9 * K12 ^ 2 * Km11 ^ 2 * K9 * K3 * K7 * K5 - 2 * Km8 * K2 * K10 * Km9 * K12 ^ 2 * Km11 * K9 * K3 * K7 * K5 * K13 - ...
    K6 * K9 * Km9 * K12 ^ 2 * K13 ^ 2 * K10 * K8 * K2 * Km3 * K5 - Km8 * K2 * K10 * Km9 * K12 * K13 ^ 2 * K9 * K3 * K7 * K11 * Km12 - Km8 * K2 * K10 * Km9 * K12 ^ 2 * K13 ^ 2 * K9 * K3 * K7 * K5 - ...
    K6 * K9 * Km9 * K12 ^ 2 * K13 ^ 2 * K10 * K8 * K2 * K7 * K5 - K6 * K9 * Km9 * K12 * Km11 * K10 * K8 * K2 * Km3 * K11 * K13 * Km12 - K6 * K9 * Km9 * K12 ^ 2 * Km11 ^ 2 * K10 * K8 * K2 * Km3 * K5 - ...
    2 * K6 * K9 * Km9 * K12 ^ 2 * Km11 * K10 * K8 * K2 * Km3 * K5 * K13 - K6 * K9 * Km9 * K12 * K13 ^ 2 * K10 * K8 * K2 * K7 * K11 * Km12 - K6 * K9 * Km9 * K12 * Km11 * K10 * K8 * K2 * K7 * K11 * K13 * Km12 - ...
    K6 * K9 * Km9 * K12 ^ 2 * Km11 ^ 2 * K10 * K8 * K2 * K7 * K5 - 2 * K6 * K9 * Km9 * K12 ^ 2 * Km11 * K10 * K8 * K2 * K7 * K5 * K13 - K6 * K9 * Km9 * K12 * K13 ^ 2 * K10 * K8 * K2 * Km3 * K11 * Km12);

% Koeffizient vor x^2
a2 = (-Km8 * K2 * K10 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K3 * K7 * Km12 - 2 * Km8 * K2 * K10 * Km9 * K12 * Km11 * K9 * K3 * K7 * K5 * K11 * K13 + 2 * Km8 * K2 * K10 * K11 * K13 ^ 2 * Km12 * K9 * K3 * K7 * K5 * K12 - ...
    2 * Km8 * K2 * K10 * Km9 * K12 * K13 ^ 2 * K9 * K3 * K7 * K5 * K11 + Km8 * K2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K9 * K3 * K7 + 2 * Km8 * K2 * K10 * K11 * K13 * Km12 * K9 * K3 * K7 * K5 * K12 * Km11 + ...
    Km8 * K2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K9 * K3 * K7 + 2 * Km8 * K2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 * K9 * K3 * K7 * K13 + Km8 * K2 * K10 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K9 * K3 * K7 - ...
    2 * K6 * K9 * Km9 * K12 * K13 ^ 2 * K10 * K8 * K2 * Km3 * K5 * K11 - 2 * K6 * K9 * Km9 * K12 * Km11 * K10 * K8 * K2 * Km3 * K5 * K11 * K13 - 2 * K6 * K9 * Km9 * K12 * Km11 * K10 * K8 * K2 * K7 * K5 * K11 * K13 + ...
    2 * K6 * K9 * K10 * K11 * K13 * Km12 * K8 * K2 * K7 * K5 * K12 * Km11 + 2 * K6 * K9 * K10 * K11 * K13 ^ 2 * Km12 * K8 * K2 * K7 * K5 * K12 - K6 * K9 ^ 2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K4 * Km3 - ...
    2 * K6 * K9 * Km9 * K12 * K13 ^ 2 * K10 * K8 * K2 * K7 * K5 * K11 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K10 * K8 * K2 * Km3 * Km12 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K10 * K8 * K2 * K7 * Km12 + ...
    K6 * K9 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K8 * K2 * Km3 + 2 * K6 * K9 * K10 * K11 * K13 * Km12 * K8 * K2 * Km3 * K5 * K12 * Km11 + 2 * K6 * K9 * K10 * K11 * K13 ^ 2 * Km12 * K8 * K2 * Km3 * K5 * K12 + ...
    K6 * K9 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K8 * K2 * K7 - K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K4 * Km3 - 2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 * K4 * Km3 * K13 - ...
    K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K4 * K7 - 2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 * K4 * K7 * K13 - K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K3 * K7 - ...
    2 * K6 * K9 ^ 2 * K10 * K11 * K13 * Km12 * K4 * Km3 * K5 * K12 * Km11 - 2 * K6 * K9 ^ 2 * K10 * K11 * K13 ^ 2 * Km12 * K4 * Km3 * K5 * K12 - K6 * K9 ^ 2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K4 * K7 - ...
    2 * K6 * K9 ^ 2 * K10 * K11 * K13 * Km12 * K4 * K7 * K5 * K12 * Km11 - 2 * K6 * K9 ^ 2 * K10 * K11 * K13 ^ 2 * Km12 * K4 * K7 * K5 * K12 - K6 * K9 ^ 2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K3 * K7 - ...
    2 * K6 * K9 ^ 2 * K10 * K11 * K13 * Km12 * K3 * K7 * K5 * K12 * Km11 - 2 * K6 * K9 ^ 2 * K10 * K11 * K13 ^ 2 * Km12 * K3 * K7 * K5 * K12 + K6 * K9 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * K2 * Km3 + ...
    2 * K6 * K9 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 * K8 * K2 * Km3 * K13 + K6 * K9 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * K2 * K7 + 2 * K6 * K9 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 * K8 * K2 * K7 * K13 - ...
    2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * Km11 * K3 * K7 * K13 + K6 * K9 * K10 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * K2 * Km3 + K6 * K9 * K10 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * K2 * K7 - ...
    K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K4 * Km3 - K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K4 * K7 - K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K3 * K7);
% Koeffizient vor x^3
a3 = (2 * K6 * K9 * K10 * K5 ^ 2 * K12 * Km11 * K8 * K2 * Km3 * K11 * K13 - 2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 * K13 ^ 2 * K4 * K7 * K11 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K10 * K8 * K2 * K7 * K5 + ...
    2 * Km8 * K2 * K10 * K5 ^ 2 * K12 * K13 ^ 2 * K9 * K3 * K7 * K11 + 2 * K6 * K9 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 * K8 * K2 * K7 * K5 + 2 * K6 * K9 * K10 * K5 ^ 2 * K12 * K13 ^ 2 * K8 * K2 * K7 * K11 - ...
    Km8 * K2 * K10 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K3 * K7 * K5 - 2 * K6 * K9 ^ 2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 * K3 * K7 * K5 - 2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 * Km11 * K4 * K7 * K11 * K13 - ...
    2 * K6 * K9 ^ 2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 * K4 * K7 * K5 + 2 * K6 * K9 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 * K8 * K2 * Km3 * K5 - 2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 * Km11 * K3 * K7 * K11 * K13 - ...
    2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 * K13 ^ 2 * K4 * Km3 * K11 + 2 * Km8 * K2 * K10 * K5 ^ 2 * K12 * Km11 * K9 * K3 * K7 * K11 * K13 - 2 * K6 * K9 ^ 2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 * K4 * Km3 * K5 + ...
    2 * K6 * K9 * K10 * K5 ^ 2 * K12 * Km11 * K8 * K2 * K7 * K11 * K13 - 2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 * K13 ^ 2 * K3 * K7 * K11 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K10 * K8 * K2 * Km3 * K5 - ...
    2 * K6 * K9 ^ 2 * K10 * K5 ^ 2 * K12 * Km11 * K4 * Km3 * K11 * K13 + 2 * Km8 * K2 * K10 * K11 ^ 2 * K13 ^ 2 * Km12 * K9 * K3 * K7 * K5 + 2 * K6 * K9 * K10 * K5 ^ 2 * K12 * K13 ^ 2 * K8 * K2 * Km3 * K11);
% Koeffizient vor x^4
a4 = (-K6 * K9 ^ 2 * K10 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K3 * K7 + K6 * K9 * K10 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K8 * K2 * Km3 - K6 * K9 ^ 2 * K10 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K4 * Km3 - ...
    K6 * K9 ^ 2 * K10 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K4 * K7 + Km8 * K2 * K10 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K9 * K3 * K7 + K6 * K9 * K10 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K8 * K2 * K7);
% Koeffizient vor x^n
an = (Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * Km3 + Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * K7 + Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * Km3 + ...
    Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * K7 + 2 * Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 ^ 2 * Km11 * K8 * Km3 * K13 + 2 * Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 ^ 2 * Km11 * K8 * K7 * K13);
% Koeffizient vor x^(n+1)
anp1 = (2 * Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 * Km11 * K8 * Km3 * K11 * K13 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * Km11 * K8 * Km3 * K11 * K13 * Km12 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 ^ 2 * Km11 ^ 2 * K8 * Km3 * K5 - ...
    4 * Km10 * K2 ^ 2 * K1 * Km9 * K12 ^ 2 * Km11 * K8 * Km3 * K5 * K13 + 2 * Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 * Km11 * K8 * K7 * K11 * K13 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * Km11 * K8 * K7 * K11 * K13 * Km12 - ...
    2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 ^ 2 * Km11 ^ 2 * K8 * K7 * K5 - 4 * Km10 * K2 ^ 2 * K1 * Km9 * K12 ^ 2 * Km11 * K8 * K7 * K5 * K13 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * K13 ^ 2 * K8 * Km3 * K11 * Km12 + ...
    2 * Km10 * K2 * K1 * Km9 * K12 ^ 2 * Km11 * K9 * K4 * Km3 * K5 * K13 + 2 * Km10 * K2 * K1 * Km9 * K12 ^ 2 * Km11 * K9 * K4 * K7 * K5 * K13 + 2 * Km10 * K2 * K1 * Km9 * K12 ^ 2 * Km11 * K9 * K3 * K7 * K5 * K13 + ...
    2 * Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 * K13 ^ 2 * K8 * Km3 * K11 - Km8 * K2 * K1 * Km9 * K12 * Km11 * K9 * K3 * K7 * K11 * K13 * Km12 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 ^ 2 * K13 ^ 2 * K8 * Km3 * K5 + ...
    2 * Km10 * K2 ^ 2 * K1 * Km9 ^ 2 * K12 * K13 ^ 2 * K8 * K7 * K11 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * K13 ^ 2 * K8 * K7 * K11 * Km12 - 2 * Km10 * K2 ^ 2 * K1 * Km9 * K12 ^ 2 * K13 ^ 2 * K8 * K7 * K5 - ...
    2 * K6 * K9 * Km9 * K12 ^ 2 * Km11 * K1 * K8 * K2 * Km3 * K5 * K13 - K6 * K9 * Km9 * K12 * Km11 * K1 * K8 * K2 * K7 * K11 * K13 * Km12 - Km8 * K2 * K1 * Km9 * K12 ^ 2 * Km11 ^ 2 * K9 * K3 * K7 * K5 - ...
    2 * Km8 * K2 * K1 * Km9 * K12 ^ 2 * Km11 * K9 * K3 * K7 * K5 * K13 - Km8 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K3 * K7 * K11 * Km12 - Km8 * K2 * K1 * Km9 * K12 ^ 2 * K13 ^ 2 * K9 * K3 * K7 * K5 - ...
    K6 * K9 * Km9 * K12 * Km11 * K1 * K8 * K2 * Km3 * K11 * K13 * Km12 - K6 * K9 * Km9 * K12 ^ 2 * Km11 ^ 2 * K1 * K8 * K2 * Km3 * K5 - K6 * K9 * Km9 * K12 ^ 2 * Km11 ^ 2 * K1 * K8 * K2 * K7 * K5 - ...
    2 * K6 * K9 * Km9 * K12 ^ 2 * Km11 * K1 * K8 * K2 * K7 * K5 * K13 - K6 * K9 * Km9 * K12 * K13 ^ 2 * K1 * K8 * K2 * Km3 * K11 * Km12 - K6 * K9 * Km9 * K12 ^ 2 * K13 ^ 2 * K1 * K8 * K2 * Km3 * K5 - ...
    K6 * K9 * Km9 * K12 * K13 ^ 2 * K1 * K8 * K2 * K7 * K11 * Km12 - K6 * K9 * Km9 * K12 ^ 2 * K13 ^ 2 * K1 * K8 * K2 * K7 * K5 + Km10 * K2 * K1 * Km9 * K12 * Km11 * K9 * K4 * Km3 * K11 * K13 * Km12 + ...
    Km10 * K2 * K1 * Km9 * K12 ^ 2 * Km11 ^ 2 * K9 * K4 * Km3 * K5 + Km10 * K2 * K1 * Km9 * K12 * Km11 * K9 * K4 * K7 * K11 * K13 * Km12 + Km10 * K2 * K1 * Km9 * K12 ^ 2 * Km11 ^ 2 * K9 * K4 * K7 * K5 + ...
    Km10 * K2 * K1 * Km9 * K12 * Km11 * K9 * K3 * K7 * K11 * K13 * Km12 + Km10 * K2 * K1 * Km9 * K12 ^ 2 * Km11 ^ 2 * K9 * K3 * K7 * K5 + Km10 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K4 * Km3 * K11 * Km12 + ...
    Km10 * K2 * K1 * Km9 * K12 ^ 2 * K13 ^ 2 * K9 * K4 * Km3 * K5 + Km10 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K4 * K7 * K11 * Km12 + Km10 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K3 * K7 * K11 * Km12 + ...
    Km10 * K2 * K1 * Km9 * K12 ^ 2 * K13 ^ 2 * K9 * K4 * K7 * K5 + Km10 * K2 * K1 * Km9 * K12 ^ 2 * K13 ^ 2 * K9 * K3 * K7 * K5);
% Koeffizient vor x^(n+2)
anp2 = (-2 * Km8 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K3 * K7 * K5 * K11 - ...
    Km8 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K3 * K7 * Km12 + 2 * Km8 * K2 * K1 * K11 * K13 * Km12 * K9 * K3 * K7 * K5 * K12 * Km11 + 2 * Km8 * K2 * K1 * K11 * K13 ^ 2 * Km12 * K9 * K3 * K7 * K5 * K12 + ...
    2 * Km8 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K9 * K3 * K7 * K13 - 2 * K6 * K9 * Km9 * K12 * Km11 * K1 * K8 * K2 * Km3 * K5 * K11 * K13 - 2 * K6 * K9 * Km9 * K12 * Km11 * K1 * K8 * K2 * K7 * K5 * K11 * K13 - ...
    2 * K6 * K9 * Km9 * K12 * K13 ^ 2 * K1 * K8 * K2 * Km3 * K5 * K11 - K6 * K9 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K4 * Km3 - 2 * K6 * K9 * Km9 * K12 * K13 ^ 2 * K1 * K8 * K2 * K7 * K5 * K11 - ...
    K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K1 * K8 * K2 * Km3 * Km12 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K1 * K8 * K2 * K7 * Km12 + 2 * K6 * K9 * K1 * K11 * K13 * Km12 * K8 * K2 * Km3 * K5 * K12 * Km11 - ...
    K6 * K9 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K4 * K7 - 2 * K6 * K9 ^ 2 * K1 * K11 * K13 * Km12 * K4 * K7 * K5 * K12 * Km11 + 2 * K6 * K9 * K1 * K11 * K13 ^ 2 * Km12 * K8 * K2 * Km3 * K5 * K12 + ...
    2 * K6 * K9 * K1 * K11 * K13 * Km12 * K8 * K2 * K7 * K5 * K12 * Km11 + 2 * K6 * K9 * K1 * K11 * K13 ^ 2 * Km12 * K8 * K2 * K7 * K5 * K12 - 2 * K6 * K9 ^ 2 * K1 * K11 * K13 * Km12 * K4 * Km3 * K5 * K12 * Km11 - ...
    2 * K6 * K9 ^ 2 * K1 * K11 * K13 ^ 2 * Km12 * K4 * Km3 * K5 * K12 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K4 * K7 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K4 * K7 * K13 - ...
    K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K3 * K7 - 2 * K6 * K9 ^ 2 * K1 * K11 * K13 ^ 2 * Km12 * K4 * K7 * K5 * K12 - K6 * K9 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K3 * K7 - ...
    2 * K6 * K9 ^ 2 * K1 * K11 * K13 * Km12 * K3 * K7 * K5 * K12 * Km11 - 2 * K6 * K9 ^ 2 * K1 * K11 * K13 ^ 2 * Km12 * K3 * K7 * K5 * K12 + 2 * K6 * K9 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K8 * K2 * Km3 * K13 + ...
    2 * K6 * K9 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K8 * K2 * K7 * K13 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K4 * Km3 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K4 * Km3 * K13 + ...
    2 * Km10 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K4 * Km3 * K5 * K11 + 2 * Km10 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K4 * K7 * K5 * K11 + 2 * Km10 * K2 * K1 * Km9 * K12 * K13 ^ 2 * K9 * K3 * K7 * K5 * K11 - ...
    2 * Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K8 * Km3 * Km12 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K3 * K7 * K13 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K4 * Km3 - ...
    K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K4 * K7 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K3 * K7 - 4 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * Km11 * K8 * Km3 * K5 * K11 * K13 - ...
    4 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * Km11 * K8 * K7 * K5 * K11 * K13 + 2 * Km10 * K2 * K1 * Km9 * K12 * Km11 * K9 * K4 * Km3 * K5 * K11 * K13 + 2 * Km10 * K2 * K1 * Km9 * K12 * Km11 * K9 * K4 * K7 * K5 * K11 * K13 + ...
    2 * Km10 * K2 * K1 * Km9 * K12 * Km11 * K9 * K3 * K7 * K5 * K11 * K13 - 4 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * K13 ^ 2 * K8 * Km3 * K5 * K11 - 4 * Km10 * K2 ^ 2 * K1 * Km9 * K12 * K13 ^ 2 * K8 * K7 * K5 * K11 - ...
    Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K9 * K4 * Km3 - 2 * Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K9 * K4 * Km3 * K13 - Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K9 * K4 * K7 - ...
    2 * Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K9 * K4 * K7 * K13 - Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K9 * K3 * K7 - 2 * Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K9 * K3 * K7 * K13 - ...
    2 * Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K8 * K7 * Km12 + 2 * Km10 * K2 ^ 2 * K1 * K11 * K13 * Km12 * K8 * Km3 * K5 * K12 * Km11 + 2 * Km10 * K2 ^ 2 * K1 * K11 * K13 ^ 2 * Km12 * K8 * Km3 * K5 * K12 + ...
    2 * Km10 * K2 ^ 2 * K1 * K11 * K13 * Km12 * K8 * K7 * K5 * K12 * Km11 + 2 * Km10 * K2 ^ 2 * K1 * K11 * K13 ^ 2 * Km12 * K8 * K7 * K5 * K12 - Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K9 * K4 * Km3 - ...
    2 * Km10 * K2 * K1 * K11 * K13 * Km12 * K9 * K4 * Km3 * K5 * K12 * Km11 - 2 * Km10 * K2 * K1 * K11 * K13 ^ 2 * Km12 * K9 * K4 * Km3 * K5 * K12 - Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K9 * K4 * K7 - ...
    2 * Km10 * K2 * K1 * K11 * K13 * Km12 * K9 * K4 * K7 * K5 * K12 * Km11 - 2 * Km10 * K2 * K1 * K11 * K13 ^ 2 * Km12 * K9 * K4 * K7 * K5 * K12 - Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K9 * K3 * K7 - ...
    2 * Km10 * K2 * K1 * K11 * K13 * Km12 * K9 * K3 * K7 * K5 * K12 * Km11 - 2 * Km10 * K2 * K1 * K11 * K13 ^ 2 * Km12 * K9 * K3 * K7 * K5 * K12 + 2 * Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K8 * Km3 * K13 + ...
    2 * Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 * K8 * K7 * K13 + K6 * K9 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K8 * K2 * Km3 + K6 * K9 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K8 * K2 * K7 + ...
    K6 * K9 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * K2 * Km3 + K6 * K9 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * K2 * K7 + K6 * K9 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * K2 * Km3 + ...
    K6 * K9 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * K2 * K7 - Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K9 * K4 * Km3 - Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K9 * K4 * K7 - ...
    Km10 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K9 * K3 * K7 - 2 * Km8 * K2 * K1 * Km9 * K12 * Km11 * K9 * K3 * K7 * K5 * K11 * K13 + Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 ^ 2 * K8 * Km3 + ...
    Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 ^ 2 * K8 * K7 + Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K4 * Km3 * Km12 + Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K4 * K7 * Km12 + ...
    Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K3 * K7 * Km12 + Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K8 * Km3 + Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K8 * K7 + ...
    Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * Km3 + Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K8 * K7 + Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * Km3 + ...
    Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K8 * K7 + Km8 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 ^ 2 * K9 * K3 * K7 + Km8 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * Km11 ^ 2 * K9 * K3 * K7 + ...
    Km8 * K2 * K1 * K5 ^ 2 * K12 ^ 2 * K13 ^ 2 * K9 * K3 * K7);
% Koeffizient vor x^(n+3)
anp3 = (-2 * Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K9 * K4 * K7 * K5 - 2 * Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K9 * K3 * K7 * K5 + 2 * Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 * Km11 * K8 * Km3 * K11 * K13 + ...
    2 * Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 * Km11 * K8 * K7 * K11 * K13 - 2 * Km10 * K2 * K1 * K5 ^ 2 * K12 * Km11 * K9 * K4 * Km3 * K11 * K13 - 2 * Km10 * K2 * K1 * K5 ^ 2 * K12 * Km11 * K9 * K4 * K7 * K11 * K13 - ...
    2 * Km10 * K2 * K1 * K5 ^ 2 * K12 * Km11 * K9 * K3 * K7 * K11 * K13 + 2 * Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K8 * Km3 * K11 - Km8 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K3 * K7 * K5 + ...
    2 * Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K8 * K7 * K11 - 2 * Km10 * K2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K9 * K4 * Km3 * K11 - 2 * Km10 * K2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K9 * K4 * K7 * K11 - ...
    2 * Km10 * K2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K9 * K3 * K7 * K11 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K1 * K8 * K2 * K7 * K5 + 2 * Km8 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K9 * K3 * K7 * K5 + ...
    2 * Km8 * K2 * K1 * K5 ^ 2 * K12 * Km11 * K9 * K3 * K7 * K11 * K13 + 2 * Km8 * K2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K9 * K3 * K7 * K11 - K6 * K9 * Km9 * K11 ^ 2 * K13 ^ 2 * K1 * K8 * K2 * Km3 * K5 + ...
    2 * K6 * K9 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K8 * K2 * Km3 * K5 + 2 * K6 * K9 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K8 * K2 * K7 * K5 - 2 * K6 * K9 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K4 * Km3 * K5 - ...
    2 * K6 * K9 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K4 * K7 * K5 - 2 * K6 * K9 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K3 * K7 * K5 + 2 * K6 * K9 * K1 * K5 ^ 2 * K12 * Km11 * K8 * K2 * Km3 * K11 * K13 + ...
    2 * K6 * K9 * K1 * K5 ^ 2 * K12 * Km11 * K8 * K2 * K7 * K11 * K13 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 * Km11 * K4 * Km3 * K11 * K13 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 * Km11 * K4 * K7 * K11 * K13 - ...
    2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 * Km11 * K3 * K7 * K11 * K13 + 2 * K6 * K9 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K8 * K2 * Km3 * K11 + 2 * K6 * K9 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K8 * K2 * K7 * K11 - ...
    2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K4 * Km3 * K11 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K4 * K7 * K11 - 2 * K6 * K9 ^ 2 * K1 * K5 ^ 2 * K12 * K13 ^ 2 * K3 * K7 * K11 - ...
    2 * Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K8 * Km3 * K5 - 2 * Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K8 * K7 * K5 + 2 * Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K8 * Km3 * K5 + ...
    2 * Km10 * K2 ^ 2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K8 * K7 * K5 - 2 * Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km12 * K9 * K4 * Km3 * K5 + Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K4 * Km3 * K5 + ...
    Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K4 * K7 * K5 + Km10 * K2 * K1 * K11 ^ 2 * K13 ^ 2 * Km9 * K9 * K3 * K7 * K5);
% Koeffizient vor x^(n+4)
anp4 = (-Km10 * K2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K9 * K3 * K7 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K3 * K7 - Km10 * K2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K9 * K4 * K7 + ...
    Km8 * K2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K9 * K3 * K7 + K6 * K9 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K8 * K2 * K7 + Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K8 * Km3 + ...
    Km10 * K2 ^ 2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K8 * K7 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K4 * Km3 - K6 * K9 ^ 2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K4 * K7 + ...
    K6 * K9 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K8 * K2 * Km3 - Km10 * K2 * K1 * K5 ^ 2 * K11 ^ 2 * K13 ^ 2 * K9 * K4 * Km3);
% Koeffizinten in der Gr��enordnung von 1e-21
% Multiplikation der Funktionswerte mit Zehnerpotenzen
while (max([anp4 anp3 anp2 anp1 an a1 a2 a3 a4]) < 1.0)    
    a1 = 10*a1;
    a2 = 10*a2;
    a3 = 10*a3;
    a4 = 10*a4;    
    an = 10*an;
    anp1 = 10*anp1;
    anp2 = 10*anp2;
    anp3 = 10*anp3;
    anp4 = 10*anp4;    
end

% x^1 ausgeklammert
polynom = @(x) anp4*x.^(n+3) + anp3*x.^(n+2) + anp2*x.^(n+1) + anp1*x.^(n) + an*x.^(n-1) + ...
               a1 + a2*x + a3*x.^2 + a4*x.^3;
           
                     
% Bestimme Nullstelle des Polynoms -> Konzentration von x_a           
options = optimoptions('fsolve','TolFun',1e-15,'Display','None');
xa = fsolve(polynom,0.2,options);    

% Plotten des Polynoms -> Visualisierung der Lage der Nullstellen
if doplot
    x = linspace(0,xa+1000*eps,10000);
    plot(x,polynom(x),'b')
end
% Fuer n = 3.818 fallen death state und transition state ann�hernd zusammen
% und polynom beruehrt die x-Achse
% Fuer kleiner werdende n wandert der transition state Richtung life state

% Konzentration von y_a im Death State
ya = K9*Km9/K2*(K12 + K11*K13/(Km11+K13)*xa)/(Km9*K12+xa*((Km9-Km12)*K11*K13/(Km11+K13)-K5*K12)-K5*K11*K13/(Km11+K13)*xa^2)-K9/K2;
% Konzentration von x_i im Death State
xi = Km9/(K2*ya+K9);
% Konzentration von y_i im Death State
yi = Km10/(K1*xa^n+K10);
% Konzentration von iap im Death State
iap = Km8/(K8+ya*(K4+K3*K7/(Km3+K7)));
% Konzentration von bar im Death State
bar = Km12/(K12+(K11*K13)/(Km11+K13)*xa);
% Konzentration von y_a~iap im Death State
yb = K3*ya*iap/(Km3+K7);
% Konzentration von x_a~bar im Death State
xb = K11*xa*bar/(Km11+K13);

ss(:,1) = [xa;ya;xi;yi;iap;bar;yb;xb];
ss(:,2) = [0;0;Km9/K9;Km10/K10;Km8/K8;Km12/K12;0;0];

% Probe -> Einsetzen in Reaktions-System
chk = [K2*xi*ya - K5*xa - K11*xa*bar + Km11*xb; ...
K1*yi*xa^n - K6*ya - K3*ya*iap + Km3*yb; ...
-K2*xi*ya - K9*xi + Km9; ...
-K1*yi*xa^n - K10*yi + Km10; ...
-K3*ya*iap - K8*iap + Km8 - K4*ya*iap + Km3*yb; ...
-K11*xa*bar + Km11*xb - K12*bar + Km12; ...
K3*ya*iap - Km3*yb - K7*yb; ...
K11*xa*bar - Km11*xb - K13 *xb];
if any(abs(chk) > 200*eps)
    warning('Attention! One or more roots for system steady states not zero in machine precision: %g',max(abs(chk)));
end