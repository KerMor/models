function dynsys = base_dynsystem
%base_dynsystem KerMor base dynamical system struct
%
% Use this as starting point for specific dynamical systems.

% Overall dynamical system struct
dynsys = struct;

%% Initial value function
% Default: Zero initial value, dependent on mu
% Format: Function handle that takes a parameter mu and returns a col-vector
dynsys.x0 = @(mu)0;

%% System Inputs
% Default: No input conversion
% Format: Function handle, dependent on t,mu
dynsys.B = @(t,mu)0;
% Default: No inputs. Has to be a cell of function handles
dynsys.inputs = [];

%% System parameter Space
% Default: No parameters.
% Format: params is a struct array with each struct in the format of
%         struct('Name',<name>,'MinVal',<min>,'MaxVal',<max>,'Desired',<num>)
dynsys.params = struct('Name',{},'MinVal',{},'MaxVal',{},'Desired',{});

%% Nonlinearity definitions
% Default: Zero
% Type: function handle, dependent on x,t,mu
dynsys.f = @(x,t,mu)0;

%% System outputs
% Default: Empty
% Type: Function handle, dependent on t,mu
dynsys.C = @(t,mu)0;


%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%% KerMor internal model properties %%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ODE function generator
dynsys.odefun = @gen_odefun;

if isempty(dyns
length(model.system.x0());
dynsys.dims = 
    
    function odefun = gen_odefun(mu, inputidx)
        % System without inputs
        if isempty(inputidx) || isempty(dynsys.inputs)
            u = @(dummy)0;
        else
            % generates the ode function for given parameter and input function
            u = dynsys.inputs{inputidx};
        end
        odefun = @(t,y)(dynsys.f(y,t,mu) + dynsys.B(t,mu)*u(t));
    end

end