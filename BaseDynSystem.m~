classdef BaseDynSystem < handle
    %BASEDYNSYSTEM Summary of this class goes here
    %   Detailed explanation goes here
    
    properties(SetAccess=protected)
        % The parameters usable for the dynamical system.
        Params = ModelParam.empty;
    end
    
    properties
        % The core f function from the dynamical system.
        f;
        
        % The input conversion
        B;
        
        % The output conversion
        C = dscomponents;
        
        % The system's possible input functions.
        % A cell array of function handles, each taking a time argument t.
        Inputs = {};
        
        % The initial value function.
        % A function handle taking the parameter argument mu.
        % The argument mu may be empty if no parameters are used within the
        % dynamic system.
        x0 = @(mu)0;
        
        % The maximum timestep allowed for any ODE solvers.
        %
        % This might be necessary if the Core function encapsulates a
        % spatial discretization and thus CFL conditions apply, for example.
        MaxTimestep = [];
    end
    
    properties(Dependent)
        % The number of inputs available.
        InputCount;
        % The number of the system's parameters.
        ParamCount;
    end
    
    methods
%         function this = BaseDynSystem()
%             % Default no-argument constructor
%         end
        
%         function copy = clone(this)
%             % Clones this system's basic (all but functions) properties and
%             % returns a new BaseDynSystem handle
%             copy = models.BaseDynSystem;
%             copy.Params = this.Params;
%             copy.Inputs = this.Inputs;
%             copy.MaxTimestep = this.MaxTimestep;
%             % Copy component handles (it's NOT cloning them!)
%             copy.f = this.f;
%             copy.B = this.B;
%             copy.C = this.C;
%             copy.x0 = this.x0;
%         end
        
        function odefun = getODEFun(this, mu, inputidx)
            % Generates the ODE function for a specific parameter mu and
            % given input index. 
            %
            % Depending on the system mu may be [] and is forwarded to the
            % evaluate function of the system's components.
            % Analogue the inputidx may be empty to force skipping the
            % system's input; however, if no inputconv component is set
            % this is ignored in any case.
            
            % System without inputs
            if isempty(inputidx) || isempty(this.Inputs) || isempty(this.B)
                odefun = @(t,x)(this.f.evaluate(x,t,mu));
            else
                % generates the ode function for given parameter and input function
                u = this.Inputs{inputidx};
                odefun = @(t,x)(this.f.evaluate(x,t,mu) + this.B.evaluate(t,mu)*u(t));
            end
        end
        
    end
    
    %% Getter & Setter
    methods
        
        function set.f(this,value)
            if ~isempty(value) && ~isa(value, 'dscomponents.ICoreFun')
                error('The property "f" has to be a class implementing dscomponents.ICoreFun');
            end
            this.f = value;
        end
        
        function set.B(this,value)
            if ~isempty(value) && ~isa(value, 'dscomponents.IInputConv')
                error('The property "B" has to be a class implementing dscomponents.IInputConv');
            end
            this.B = value;
        end
        
        function set.C(this,value)
            if ~isempty(value) && ~isa(value, 'dscomponents.IOutputConv')
                error('The property "C" has to be a class implementing dscomponents.IOutputConv');
            end
            this.C = value;
        end
        
        function set.Inputs(this,value)
            if ~iscell(value)
                error('Property "Inputs" must be a cell array.');
            end
            for n=1:length(value)
                if ~isa(value{n},'function_handle')
                    error('Each "Inputs" cell must contain a function handle.');
                elseif nargin(value{n}) ~= 1
                    error('Each "Inputs" function must take exactly one (=time) parameter.');
                end
            end
            this.Inputs = value;
        end
        
        function value = get.ParamCount(this)
            value = length(this.Params);
        end
        
        function value = get.InputCount(this)
            value = length(this.Inputs);
        end
    end
    
    %% Protected methods
    methods(Access=protected)
        
        function addParam(this, name, range, desired)
            % Adds a parameter with the given values to the parameter
            % collection of the current dynamical system.
            %
            % Use in subclass constructors to easily define desired default
            % parameters for a specific dynamical system.
            % range can be either a scalar or a 1x2 double vector.
            %
            % See also: ModelParam
            
            this.Params(end+1) = ModelParam(name, range, desired);
        end
        
        function removeParam(this, name)
            % @TODO implement
            error('not implemented');
        end
    end
    
end

